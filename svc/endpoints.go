// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: 5f7d5bf015
// Version Date: 2021-11-26T09:27:01Z

package svc

// This file contains methods to make individual endpoints from services,
// request and response types to serve those endpoints, as well as encoders and
// decoders for those types, for all of our supported transport serialization
// formats.

import (
	"context"
	"fmt"

	"github.com/go-kit/kit/endpoint"

	pb "github.com/mises-id/mises-swapsvc/proto"
)

// Endpoints collects all of the endpoints that compose an add service. It's
// meant to be used as a helper struct, to collect all of the endpoints into a
// single parameter.
//
// In a server, it's useful for functions that need to operate on a per-endpoint
// basis. For example, you might pass an Endpoints to a function that produces
// an http.Handler, with each method (endpoint) wired up to a specific path. (It
// is probably a mistake in design to invoke the Service methods on the
// Endpoints struct in a server.)
//
// In a client, it's useful to collect individually constructed endpoints into a
// single type that implements the Service interface. For example, you might
// construct individual endpoints using transport/http.NewClient, combine them into an Endpoints, and return it to the caller as a Service.
type Endpoints struct {
	SyncSwapOrderEndpoint           endpoint.Endpoint
	SwapOrderPageEndpoint           endpoint.Endpoint
	FindSwapOrderEndpoint           endpoint.Endpoint
	ListSwapTokenEndpoint           endpoint.Endpoint
	GetSwapApproveAllowanceEndpoint endpoint.Endpoint
	ApproveSwapTransactionEndpoint  endpoint.Endpoint
	SwapTradeEndpoint               endpoint.Endpoint
	SwapQuoteEndpoint               endpoint.Endpoint
	TestEndpoint                    endpoint.Endpoint
	HealthEndpoint                  endpoint.Endpoint
}

// Endpoints

func (e Endpoints) SyncSwapOrder(ctx context.Context, in *pb.SyncSwapOrderRequest) (*pb.SyncSwapOrderResponse, error) {
	response, err := e.SyncSwapOrderEndpoint(ctx, in)
	if err != nil {
		return nil, err
	}
	return response.(*pb.SyncSwapOrderResponse), nil
}

func (e Endpoints) SwapOrderPage(ctx context.Context, in *pb.SwapOrderPageRequest) (*pb.SwapOrderPageResponse, error) {
	response, err := e.SwapOrderPageEndpoint(ctx, in)
	if err != nil {
		return nil, err
	}
	return response.(*pb.SwapOrderPageResponse), nil
}

func (e Endpoints) FindSwapOrder(ctx context.Context, in *pb.FindSwapOrderRequest) (*pb.FindSwapOrderResponse, error) {
	response, err := e.FindSwapOrderEndpoint(ctx, in)
	if err != nil {
		return nil, err
	}
	return response.(*pb.FindSwapOrderResponse), nil
}

func (e Endpoints) ListSwapToken(ctx context.Context, in *pb.ListSwapTokenRequest) (*pb.ListSwapTokenResponse, error) {
	response, err := e.ListSwapTokenEndpoint(ctx, in)
	if err != nil {
		return nil, err
	}
	return response.(*pb.ListSwapTokenResponse), nil
}

func (e Endpoints) GetSwapApproveAllowance(ctx context.Context, in *pb.GetSwapApproveAllowanceRequest) (*pb.GetSwapApproveAllowanceResponse, error) {
	response, err := e.GetSwapApproveAllowanceEndpoint(ctx, in)
	if err != nil {
		return nil, err
	}
	return response.(*pb.GetSwapApproveAllowanceResponse), nil
}

func (e Endpoints) ApproveSwapTransaction(ctx context.Context, in *pb.ApproveSwapTransactionRequest) (*pb.ApproveSwapTransactionResponse, error) {
	response, err := e.ApproveSwapTransactionEndpoint(ctx, in)
	if err != nil {
		return nil, err
	}
	return response.(*pb.ApproveSwapTransactionResponse), nil
}

func (e Endpoints) SwapTrade(ctx context.Context, in *pb.SwapTradeRequest) (*pb.SwapTradeResponse, error) {
	response, err := e.SwapTradeEndpoint(ctx, in)
	if err != nil {
		return nil, err
	}
	return response.(*pb.SwapTradeResponse), nil
}

func (e Endpoints) SwapQuote(ctx context.Context, in *pb.SwapQuoteRequest) (*pb.SwapQuoteResponse, error) {
	response, err := e.SwapQuoteEndpoint(ctx, in)
	if err != nil {
		return nil, err
	}
	return response.(*pb.SwapQuoteResponse), nil
}

func (e Endpoints) Test(ctx context.Context, in *pb.TestRequest) (*pb.TestResponse, error) {
	response, err := e.TestEndpoint(ctx, in)
	if err != nil {
		return nil, err
	}
	return response.(*pb.TestResponse), nil
}

func (e Endpoints) Health(ctx context.Context, in *pb.HealthRequest) (*pb.HealthResponse, error) {
	response, err := e.HealthEndpoint(ctx, in)
	if err != nil {
		return nil, err
	}
	return response.(*pb.HealthResponse), nil
}

// Make Endpoints

func MakeSyncSwapOrderEndpoint(s pb.SwapsvcServer) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*pb.SyncSwapOrderRequest)
		v, err := s.SyncSwapOrder(ctx, req)
		if err != nil {
			return nil, err
		}
		return v, nil
	}
}

func MakeSwapOrderPageEndpoint(s pb.SwapsvcServer) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*pb.SwapOrderPageRequest)
		v, err := s.SwapOrderPage(ctx, req)
		if err != nil {
			return nil, err
		}
		return v, nil
	}
}

func MakeFindSwapOrderEndpoint(s pb.SwapsvcServer) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*pb.FindSwapOrderRequest)
		v, err := s.FindSwapOrder(ctx, req)
		if err != nil {
			return nil, err
		}
		return v, nil
	}
}

func MakeListSwapTokenEndpoint(s pb.SwapsvcServer) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*pb.ListSwapTokenRequest)
		v, err := s.ListSwapToken(ctx, req)
		if err != nil {
			return nil, err
		}
		return v, nil
	}
}

func MakeGetSwapApproveAllowanceEndpoint(s pb.SwapsvcServer) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*pb.GetSwapApproveAllowanceRequest)
		v, err := s.GetSwapApproveAllowance(ctx, req)
		if err != nil {
			return nil, err
		}
		return v, nil
	}
}

func MakeApproveSwapTransactionEndpoint(s pb.SwapsvcServer) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*pb.ApproveSwapTransactionRequest)
		v, err := s.ApproveSwapTransaction(ctx, req)
		if err != nil {
			return nil, err
		}
		return v, nil
	}
}

func MakeSwapTradeEndpoint(s pb.SwapsvcServer) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*pb.SwapTradeRequest)
		v, err := s.SwapTrade(ctx, req)
		if err != nil {
			return nil, err
		}
		return v, nil
	}
}

func MakeSwapQuoteEndpoint(s pb.SwapsvcServer) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*pb.SwapQuoteRequest)
		v, err := s.SwapQuote(ctx, req)
		if err != nil {
			return nil, err
		}
		return v, nil
	}
}

func MakeTestEndpoint(s pb.SwapsvcServer) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*pb.TestRequest)
		v, err := s.Test(ctx, req)
		if err != nil {
			return nil, err
		}
		return v, nil
	}
}

func MakeHealthEndpoint(s pb.SwapsvcServer) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*pb.HealthRequest)
		v, err := s.Health(ctx, req)
		if err != nil {
			return nil, err
		}
		return v, nil
	}
}

// WrapAllExcept wraps each Endpoint field of struct Endpoints with a
// go-kit/kit/endpoint.Middleware.
// Use this for applying a set of middlewares to every endpoint in the service.
// Optionally, endpoints can be passed in by name to be excluded from being wrapped.
// WrapAllExcept(middleware, "Status", "Ping")
func (e *Endpoints) WrapAllExcept(middleware endpoint.Middleware, excluded ...string) {
	included := map[string]struct{}{
		"SyncSwapOrder":           {},
		"SwapOrderPage":           {},
		"FindSwapOrder":           {},
		"ListSwapToken":           {},
		"GetSwapApproveAllowance": {},
		"ApproveSwapTransaction":  {},
		"SwapTrade":               {},
		"SwapQuote":               {},
		"Test":                    {},
		"Health":                  {},
	}

	for _, ex := range excluded {
		if _, ok := included[ex]; !ok {
			panic(fmt.Sprintf("Excluded endpoint '%s' does not exist; see middlewares/endpoints.go", ex))
		}
		delete(included, ex)
	}

	for inc := range included {
		if inc == "SyncSwapOrder" {
			e.SyncSwapOrderEndpoint = middleware(e.SyncSwapOrderEndpoint)
		}
		if inc == "SwapOrderPage" {
			e.SwapOrderPageEndpoint = middleware(e.SwapOrderPageEndpoint)
		}
		if inc == "FindSwapOrder" {
			e.FindSwapOrderEndpoint = middleware(e.FindSwapOrderEndpoint)
		}
		if inc == "ListSwapToken" {
			e.ListSwapTokenEndpoint = middleware(e.ListSwapTokenEndpoint)
		}
		if inc == "GetSwapApproveAllowance" {
			e.GetSwapApproveAllowanceEndpoint = middleware(e.GetSwapApproveAllowanceEndpoint)
		}
		if inc == "ApproveSwapTransaction" {
			e.ApproveSwapTransactionEndpoint = middleware(e.ApproveSwapTransactionEndpoint)
		}
		if inc == "SwapTrade" {
			e.SwapTradeEndpoint = middleware(e.SwapTradeEndpoint)
		}
		if inc == "SwapQuote" {
			e.SwapQuoteEndpoint = middleware(e.SwapQuoteEndpoint)
		}
		if inc == "Test" {
			e.TestEndpoint = middleware(e.TestEndpoint)
		}
		if inc == "Health" {
			e.HealthEndpoint = middleware(e.HealthEndpoint)
		}
	}
}

// LabeledMiddleware will get passed the endpoint name when passed to
// WrapAllLabeledExcept, this can be used to write a generic metrics
// middleware which can send the endpoint name to the metrics collector.
type LabeledMiddleware func(string, endpoint.Endpoint) endpoint.Endpoint

// WrapAllLabeledExcept wraps each Endpoint field of struct Endpoints with a
// LabeledMiddleware, which will receive the name of the endpoint. See
// LabeldMiddleware. See method WrapAllExept for details on excluded
// functionality.
func (e *Endpoints) WrapAllLabeledExcept(middleware func(string, endpoint.Endpoint) endpoint.Endpoint, excluded ...string) {
	included := map[string]struct{}{
		"SyncSwapOrder":           {},
		"SwapOrderPage":           {},
		"FindSwapOrder":           {},
		"ListSwapToken":           {},
		"GetSwapApproveAllowance": {},
		"ApproveSwapTransaction":  {},
		"SwapTrade":               {},
		"SwapQuote":               {},
		"Test":                    {},
		"Health":                  {},
	}

	for _, ex := range excluded {
		if _, ok := included[ex]; !ok {
			panic(fmt.Sprintf("Excluded endpoint '%s' does not exist; see middlewares/endpoints.go", ex))
		}
		delete(included, ex)
	}

	for inc := range included {
		if inc == "SyncSwapOrder" {
			e.SyncSwapOrderEndpoint = middleware("SyncSwapOrder", e.SyncSwapOrderEndpoint)
		}
		if inc == "SwapOrderPage" {
			e.SwapOrderPageEndpoint = middleware("SwapOrderPage", e.SwapOrderPageEndpoint)
		}
		if inc == "FindSwapOrder" {
			e.FindSwapOrderEndpoint = middleware("FindSwapOrder", e.FindSwapOrderEndpoint)
		}
		if inc == "ListSwapToken" {
			e.ListSwapTokenEndpoint = middleware("ListSwapToken", e.ListSwapTokenEndpoint)
		}
		if inc == "GetSwapApproveAllowance" {
			e.GetSwapApproveAllowanceEndpoint = middleware("GetSwapApproveAllowance", e.GetSwapApproveAllowanceEndpoint)
		}
		if inc == "ApproveSwapTransaction" {
			e.ApproveSwapTransactionEndpoint = middleware("ApproveSwapTransaction", e.ApproveSwapTransactionEndpoint)
		}
		if inc == "SwapTrade" {
			e.SwapTradeEndpoint = middleware("SwapTrade", e.SwapTradeEndpoint)
		}
		if inc == "SwapQuote" {
			e.SwapQuoteEndpoint = middleware("SwapQuote", e.SwapQuoteEndpoint)
		}
		if inc == "Test" {
			e.TestEndpoint = middleware("Test", e.TestEndpoint)
		}
		if inc == "Health" {
			e.HealthEndpoint = middleware("Health", e.HealthEndpoint)
		}
	}
}
