// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: 5f7d5bf015
// Version Date: 2021-11-26T09:27:01Z

package svc

// This file provides server-side bindings for the gRPC transport.
// It utilizes the transport/grpc.Server.

import (
	"context"
	"net/http"

	"google.golang.org/grpc/metadata"

	grpctransport "github.com/go-kit/kit/transport/grpc"

	// This Service
	pb "github.com/mises-id/mises-swapsvc/proto"
)

// MakeGRPCServer makes a set of endpoints available as a gRPC SwapsvcServer.
func MakeGRPCServer(endpoints Endpoints, options ...grpctransport.ServerOption) pb.SwapsvcServer {
	serverOptions := []grpctransport.ServerOption{
		grpctransport.ServerBefore(metadataToContext),
	}
	serverOptions = append(serverOptions, options...)
	return &grpcServer{
		// swapsvc

		syncswaporder: grpctransport.NewServer(
			endpoints.SyncSwapOrderEndpoint,
			DecodeGRPCSyncSwapOrderRequest,
			EncodeGRPCSyncSwapOrderResponse,
			serverOptions...,
		),
		swaporderpage: grpctransport.NewServer(
			endpoints.SwapOrderPageEndpoint,
			DecodeGRPCSwapOrderPageRequest,
			EncodeGRPCSwapOrderPageResponse,
			serverOptions...,
		),
		findswaporder: grpctransport.NewServer(
			endpoints.FindSwapOrderEndpoint,
			DecodeGRPCFindSwapOrderRequest,
			EncodeGRPCFindSwapOrderResponse,
			serverOptions...,
		),
		listswaptoken: grpctransport.NewServer(
			endpoints.ListSwapTokenEndpoint,
			DecodeGRPCListSwapTokenRequest,
			EncodeGRPCListSwapTokenResponse,
			serverOptions...,
		),
		getswapapproveallowance: grpctransport.NewServer(
			endpoints.GetSwapApproveAllowanceEndpoint,
			DecodeGRPCGetSwapApproveAllowanceRequest,
			EncodeGRPCGetSwapApproveAllowanceResponse,
			serverOptions...,
		),
		approveswaptransaction: grpctransport.NewServer(
			endpoints.ApproveSwapTransactionEndpoint,
			DecodeGRPCApproveSwapTransactionRequest,
			EncodeGRPCApproveSwapTransactionResponse,
			serverOptions...,
		),
		swaptrade: grpctransport.NewServer(
			endpoints.SwapTradeEndpoint,
			DecodeGRPCSwapTradeRequest,
			EncodeGRPCSwapTradeResponse,
			serverOptions...,
		),
		swapquote: grpctransport.NewServer(
			endpoints.SwapQuoteEndpoint,
			DecodeGRPCSwapQuoteRequest,
			EncodeGRPCSwapQuoteResponse,
			serverOptions...,
		),
		test: grpctransport.NewServer(
			endpoints.TestEndpoint,
			DecodeGRPCTestRequest,
			EncodeGRPCTestResponse,
			serverOptions...,
		),
		health: grpctransport.NewServer(
			endpoints.HealthEndpoint,
			DecodeGRPCHealthRequest,
			EncodeGRPCHealthResponse,
			serverOptions...,
		),
	}
}

// grpcServer implements the SwapsvcServer interface
type grpcServer struct {
	syncswaporder           grpctransport.Handler
	swaporderpage           grpctransport.Handler
	findswaporder           grpctransport.Handler
	listswaptoken           grpctransport.Handler
	getswapapproveallowance grpctransport.Handler
	approveswaptransaction  grpctransport.Handler
	swaptrade               grpctransport.Handler
	swapquote               grpctransport.Handler
	test                    grpctransport.Handler
	health                  grpctransport.Handler
}

// Methods for grpcServer to implement SwapsvcServer interface

func (s *grpcServer) SyncSwapOrder(ctx context.Context, req *pb.SyncSwapOrderRequest) (*pb.SyncSwapOrderResponse, error) {
	_, rep, err := s.syncswaporder.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.SyncSwapOrderResponse), nil
}

func (s *grpcServer) SwapOrderPage(ctx context.Context, req *pb.SwapOrderPageRequest) (*pb.SwapOrderPageResponse, error) {
	_, rep, err := s.swaporderpage.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.SwapOrderPageResponse), nil
}

func (s *grpcServer) FindSwapOrder(ctx context.Context, req *pb.FindSwapOrderRequest) (*pb.FindSwapOrderResponse, error) {
	_, rep, err := s.findswaporder.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.FindSwapOrderResponse), nil
}

func (s *grpcServer) ListSwapToken(ctx context.Context, req *pb.ListSwapTokenRequest) (*pb.ListSwapTokenResponse, error) {
	_, rep, err := s.listswaptoken.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.ListSwapTokenResponse), nil
}

func (s *grpcServer) GetSwapApproveAllowance(ctx context.Context, req *pb.GetSwapApproveAllowanceRequest) (*pb.GetSwapApproveAllowanceResponse, error) {
	_, rep, err := s.getswapapproveallowance.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.GetSwapApproveAllowanceResponse), nil
}

func (s *grpcServer) ApproveSwapTransaction(ctx context.Context, req *pb.ApproveSwapTransactionRequest) (*pb.ApproveSwapTransactionResponse, error) {
	_, rep, err := s.approveswaptransaction.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.ApproveSwapTransactionResponse), nil
}

func (s *grpcServer) SwapTrade(ctx context.Context, req *pb.SwapTradeRequest) (*pb.SwapTradeResponse, error) {
	_, rep, err := s.swaptrade.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.SwapTradeResponse), nil
}

func (s *grpcServer) SwapQuote(ctx context.Context, req *pb.SwapQuoteRequest) (*pb.SwapQuoteResponse, error) {
	_, rep, err := s.swapquote.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.SwapQuoteResponse), nil
}

func (s *grpcServer) Test(ctx context.Context, req *pb.TestRequest) (*pb.TestResponse, error) {
	_, rep, err := s.test.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.TestResponse), nil
}

func (s *grpcServer) Health(ctx context.Context, req *pb.HealthRequest) (*pb.HealthResponse, error) {
	_, rep, err := s.health.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.HealthResponse), nil
}

// Server Decode

// DecodeGRPCSyncSwapOrderRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC syncswaporder request to a user-domain syncswaporder request. Primarily useful in a server.
func DecodeGRPCSyncSwapOrderRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.SyncSwapOrderRequest)
	return req, nil
}

// DecodeGRPCSwapOrderPageRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC swaporderpage request to a user-domain swaporderpage request. Primarily useful in a server.
func DecodeGRPCSwapOrderPageRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.SwapOrderPageRequest)
	return req, nil
}

// DecodeGRPCFindSwapOrderRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC findswaporder request to a user-domain findswaporder request. Primarily useful in a server.
func DecodeGRPCFindSwapOrderRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.FindSwapOrderRequest)
	return req, nil
}

// DecodeGRPCListSwapTokenRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC listswaptoken request to a user-domain listswaptoken request. Primarily useful in a server.
func DecodeGRPCListSwapTokenRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.ListSwapTokenRequest)
	return req, nil
}

// DecodeGRPCGetSwapApproveAllowanceRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC getswapapproveallowance request to a user-domain getswapapproveallowance request. Primarily useful in a server.
func DecodeGRPCGetSwapApproveAllowanceRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.GetSwapApproveAllowanceRequest)
	return req, nil
}

// DecodeGRPCApproveSwapTransactionRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC approveswaptransaction request to a user-domain approveswaptransaction request. Primarily useful in a server.
func DecodeGRPCApproveSwapTransactionRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.ApproveSwapTransactionRequest)
	return req, nil
}

// DecodeGRPCSwapTradeRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC swaptrade request to a user-domain swaptrade request. Primarily useful in a server.
func DecodeGRPCSwapTradeRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.SwapTradeRequest)
	return req, nil
}

// DecodeGRPCSwapQuoteRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC swapquote request to a user-domain swapquote request. Primarily useful in a server.
func DecodeGRPCSwapQuoteRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.SwapQuoteRequest)
	return req, nil
}

// DecodeGRPCTestRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC test request to a user-domain test request. Primarily useful in a server.
func DecodeGRPCTestRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.TestRequest)
	return req, nil
}

// DecodeGRPCHealthRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC health request to a user-domain health request. Primarily useful in a server.
func DecodeGRPCHealthRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.HealthRequest)
	return req, nil
}

// Server Encode

// EncodeGRPCSyncSwapOrderResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain syncswaporder response to a gRPC syncswaporder reply. Primarily useful in a server.
func EncodeGRPCSyncSwapOrderResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.SyncSwapOrderResponse)
	return resp, nil
}

// EncodeGRPCSwapOrderPageResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain swaporderpage response to a gRPC swaporderpage reply. Primarily useful in a server.
func EncodeGRPCSwapOrderPageResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.SwapOrderPageResponse)
	return resp, nil
}

// EncodeGRPCFindSwapOrderResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain findswaporder response to a gRPC findswaporder reply. Primarily useful in a server.
func EncodeGRPCFindSwapOrderResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.FindSwapOrderResponse)
	return resp, nil
}

// EncodeGRPCListSwapTokenResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain listswaptoken response to a gRPC listswaptoken reply. Primarily useful in a server.
func EncodeGRPCListSwapTokenResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.ListSwapTokenResponse)
	return resp, nil
}

// EncodeGRPCGetSwapApproveAllowanceResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain getswapapproveallowance response to a gRPC getswapapproveallowance reply. Primarily useful in a server.
func EncodeGRPCGetSwapApproveAllowanceResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.GetSwapApproveAllowanceResponse)
	return resp, nil
}

// EncodeGRPCApproveSwapTransactionResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain approveswaptransaction response to a gRPC approveswaptransaction reply. Primarily useful in a server.
func EncodeGRPCApproveSwapTransactionResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.ApproveSwapTransactionResponse)
	return resp, nil
}

// EncodeGRPCSwapTradeResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain swaptrade response to a gRPC swaptrade reply. Primarily useful in a server.
func EncodeGRPCSwapTradeResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.SwapTradeResponse)
	return resp, nil
}

// EncodeGRPCSwapQuoteResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain swapquote response to a gRPC swapquote reply. Primarily useful in a server.
func EncodeGRPCSwapQuoteResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.SwapQuoteResponse)
	return resp, nil
}

// EncodeGRPCTestResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain test response to a gRPC test reply. Primarily useful in a server.
func EncodeGRPCTestResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.TestResponse)
	return resp, nil
}

// EncodeGRPCHealthResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain health response to a gRPC health reply. Primarily useful in a server.
func EncodeGRPCHealthResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.HealthResponse)
	return resp, nil
}

// Helpers

func metadataToContext(ctx context.Context, md metadata.MD) context.Context {
	for k, v := range md {
		if v != nil {
			// The key is added both in metadata format (k) which is all lower
			// and the http.CanonicalHeaderKey of the key so that it can be
			// accessed in either format
			ctx = context.WithValue(ctx, k, v[0])
			ctx = context.WithValue(ctx, http.CanonicalHeaderKey(k), v[0])
		}
	}

	return ctx
}
